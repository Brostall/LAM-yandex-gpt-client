import logging
import os
import asyncio
from datetime import datetime, time
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram._message import Message
from src.config import TELEGRAM_BOT_TOKEN, ALLOWED_CHAT_IDS, YANDEX_FOLDER_ID, ADMIN_USER_IDS
from src.yandex_gpt import YandexGPT
from src.file_handler import FileHandler
from telegram import PhotoSize
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
file_handler = FileHandler(team_name="LAM")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YandexGPT
gpt = YandexGPT('service-account-key.json', YANDEX_FOLDER_ID)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
report_chat_id = None
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
report_time = time(7, 0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 7:00
# –§–ª–∞–≥ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
auto_report_enabled = False

def mask_token(text: str) -> str:
    """–ú–∞—Å–∫–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if TELEGRAM_BOT_TOKEN in text:
        return text.replace(TELEGRAM_BOT_TOKEN, "***TOKEN***")
    return text

def is_allowed_chat(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —á–∞—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    return not ALLOWED_CHAT_IDS or chat_id in ALLOWED_CHAT_IDS

async def check_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞"""
    user_id = update.effective_user.id
    if not ADMIN_USER_IDS or user_id not in ADMIN_USER_IDS:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.username} (ID: {user_id})")
        return False
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not is_allowed_chat(update.effective_chat.id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ {update.effective_chat.id}")
        return
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–≥—Ä–æ–Ω–æ–º–æ–≤. "
        "–Ø –±—É–¥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é YandexGPT –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ Excel.\n\n"
        "üìù –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é Excel-—Ç–∞–±–ª–∏—Ü—É!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/export - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∞–≥—Ä–æ–Ω–æ–º–æ–≤\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "/schedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–æ–≤"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞"""
    if not is_allowed_chat(update.effective_chat.id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ {update.effective_chat.id}")
        return
        
    help_text = (
        "ü§ñ –Ø - –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n\n"
        "üìù *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
        "1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ\n"
        "2. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –ò–ò –∏ –¥–æ–±–∞–≤–ª—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
        "3. –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç Excel –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n"
        "üîç *–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π:*\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã (–ü–∞—Ö–æ—Ç–∞, –î–∏—Å–∫–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥.)\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ –ü–£ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–ü–æ –ü—É 123/456`\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–æ–≤: `–û—Ç–¥ 12 123/456`\n\n"
        "üìä *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/export - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "/schedule - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–æ–≤\n"
        "/reset - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n\n"
        "üì± –ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π Lenin Agro Monitor"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

async def export_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export"""
    if not is_allowed_chat(update.effective_chat.id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ {update.effective_chat.id}")
        return
    
    await update.message.reply_text("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –≤ Excel –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏...")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
        excel_path = file_handler.update_excel()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_document(
            document=open(excel_path, 'rb'),
            caption=(
                "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel. –¢–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–æ–Ω–∫–∏: "
                "–î–∞—Ç–∞, –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –û–ø–µ—Ä–∞—Ü–∏—è, –ö—É–ª—å—Ç—É—Ä–∞, –ó–∞ –¥–µ–Ω—å (–≥–∞), –° –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≥–∞), –í–∞–ª –∑–∞ –¥–µ–Ω—å (—Ü), –í–∞–ª —Å –Ω–∞—á–∞–ª–∞ (—Ü).\n\n"
                "‚ö†Ô∏è –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –Ø—á–µ–π–∫–∏ —Å –∂–µ–ª—Ç–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å."
            )
        )
        
        logger.info(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {excel_path}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    if not is_allowed_chat(update.effective_chat.id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ {update.effective_chat.id}")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = file_handler.get_statistics()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        total_messages = stats["total_messages"]
        senders_info = "\n".join([f"- {sender}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π" for sender, count in stats["senders"].items()])
        
        last_excel_info = ""
        if "last_excel" in stats and stats["last_excel"]:
            last_excel_info = (
                f"\n\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–π Excel-—Ñ–∞–π–ª:\n"
                f"–ü—É—Ç—å: {stats['last_excel']}"
            )
            if "last_excel_modified" in stats:
                last_excel_info += f"\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['last_excel_modified']}"
        
        stats_message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
            f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            f"–ü–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º:\n{senders_info}\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {file_handler.messages_path}{last_excel_info}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
        keyboard = [
            [InlineKeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Excel", callback_data="export_excel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(stats_message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

async def schedule_reports(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule"""
    if not is_allowed_chat(update.effective_chat.id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ {update.effective_chat.id}")
        return
    
    global report_chat_id, auto_report_enabled
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
    report_chat_id = update.effective_chat.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
    keyboard = [
        [
            InlineKeyboardButton("6:00", callback_data="schedule_time_6"),
            InlineKeyboardButton("7:00", callback_data="schedule_time_7"),
            InlineKeyboardButton("8:00", callback_data="schedule_time_8")
        ],
        [
            InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="schedule_enable"),
            InlineKeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="schedule_disable")
        ],
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç —Å–µ–π—á–∞—Å", callback_data="send_report_now")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    status = "–≤–∫–ª—é—á–µ–Ω–∞" if auto_report_enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
    
    await update.message.reply_text(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤.\n\n"
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {report_time.hour}:00\n"
        f"–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏: {status}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=reply_markup
    )

async def send_scheduled_report():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç"""
    global report_chat_id
    
    if not report_chat_id or not auto_report_enabled:
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        return
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
        excel_path = file_handler.update_excel()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
        await context.bot.send_document(
            chat_id=report_chat_id,
            document=open(excel_path, 'rb'),
            caption=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∑–∞ {datetime.now().strftime('%d.%m.%Y')}"
        )
        
        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {report_chat_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        if report_chat_id:
            await context.bot.send_message(
                chat_id=report_chat_id,
                text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}"
            )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    global report_time, auto_report_enabled
    
    if query.data == "export_excel":
        await query.edit_message_text(text="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –≤ Excel –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ...")
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
            excel_path = file_handler.update_excel()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.message.reply_document(
                document=open(excel_path, 'rb'),
                caption="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ê–û–†. –Ø—á–µ–π–∫–∏ —Å –∂–µ–ª—Ç–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å."
            )
            
            await query.edit_message_text(text="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel")
            logger.info(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {excel_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await query.edit_message_text(text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    elif query.data.startswith("schedule_time_"):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
        hour = int(query.data.split("_")[-1])
        report_time = time(hour, 0)
        
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if auto_report_enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        await query.edit_message_text(
            f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour}:00\n"
            f"–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏: {status}"
        )
    
    elif query.data == "schedule_enable":
        # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–æ–≤
        auto_report_enabled = True
        await query.edit_message_text(
            f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞.\n"
            f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {report_time.hour}:00"
        )
    
    elif query.data == "schedule_disable":
        # –í—ã–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–æ–≤
        auto_report_enabled = False
        await query.edit_message_text(
            f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω–∞."
        )
    
    elif query.data == "send_report_now":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        await query.edit_message_text(text="–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á–µ—Ç...")
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
            excel_path = file_handler.update_excel()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.message.reply_document(
                document=open(excel_path, 'rb'),
                caption=f"–û—Ç—á–µ—Ç –∑–∞ {datetime.now().strftime('%d.%m.%Y')}"
            )
            
            await query.edit_message_text(text="–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
            await query.edit_message_text(text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {str(e)}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not is_allowed_chat(update.effective_chat.id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ {update.effective_chat.id}")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        message = update.message
        sender_name = message.from_user.first_name or "Unknown"
        message_text = message.text
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}: {mask_token(message_text[:50])}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."
        process_message = await message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é YandexGPT –∏ –æ–±–Ω–æ–≤–ª—è—é Excel-—Ç–∞–±–ª–∏—Ü—É...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ —Å YandexGPT
        file_path, extracted_data = await file_handler.save_message(sender_name, message_text, gpt)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {file_path}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."
        await process_message.delete()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        response = "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ YandexGPT –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Excel-—Ç–∞–±–ª–∏—Ü—É\n\n"
        
        if "error" in extracted_data:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –µ—Å–ª–∏ YandexGPT –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è
            extracted_data = file_handler.parse_message(message_text)
            response += "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é YandexGPT –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑.\n\n"
        
        if "operations" in extracted_data and extracted_data["operations"]:
            response += f"üìã YandexGPT –æ–±–Ω–∞—Ä—É–∂–∏–ª {len(extracted_data['operations'])} –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n"
            
            for i, operation in enumerate(extracted_data["operations"], 1):
                response += f"üîπ –û–ø–µ—Ä–∞—Ü–∏—è #{i}:\n"
                
                if "work_type" in operation and operation["work_type"]:
                    response += f"  üöú –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {operation['work_type']}\n"
                    
                if "operation" in operation and operation["operation"]:
                    response += f"  üìù –û–ø–µ—Ä–∞—Ü–∏—è: {operation['operation']}\n"
                    
                if "culture_from" in operation and operation["culture_from"]:
                    response += f"  üå± –ò—Å—Ö–æ–¥–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞: {operation['culture_from']}\n"
                    
                if "culture_to" in operation and operation["culture_to"]:
                    response += f"  üåæ –¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞: {operation['culture_to']}\n"
                    
                if "department" in operation and operation["department"]:
                    response += f"  üè¢ –û—Ç–¥–µ–ª: {operation['department']}\n"
                    
                if "department_number" in operation and "department_area" in operation:
                    if operation["department_number"] and operation["department_area"]:
                        response += f"  üìä –ù–æ–º–µ—Ä/–ø–ª–æ—â–∞–¥—å –æ—Ç–¥–µ–ª–∞: {operation['department_number']}/{operation['department_area']}\n"
                    
                if "pu_number" in operation and "pu_area" in operation:
                    if operation["pu_number"] and operation["pu_area"]:
                        response += f"  üî¢ –ü–£ –Ω–æ–º–µ—Ä/–ø–ª–æ—â–∞–¥—å: {operation['pu_number']}/{operation['pu_area']}\n"
                
                response += "\n"
                
            if "corrections" in extracted_data and extracted_data["corrections"]:
                response += f"\n‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {extracted_data['corrections']}\n"
        
        elif extracted_data:
            response += "üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
            
            if "work_type" in extracted_data and extracted_data["work_type"]:
                response += f"üöú –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {extracted_data['work_type']}\n"
                
            if "culture_from" in extracted_data and extracted_data["culture_from"]:
                response += f"üå± –ò—Å—Ö–æ–¥–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞: {extracted_data['culture_from']}\n"
                
            if "culture_to" in extracted_data and extracted_data["culture_to"]:
                response += f"üåæ –¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞: {extracted_data['culture_to']}\n"
                
            if "department" in extracted_data and extracted_data["department"]:
                response += f"üè¢ –û—Ç–¥–µ–ª: {extracted_data['department']}\n"
                
            if "department_number" in extracted_data and "department_area" in extracted_data:
                if extracted_data["department_number"] and extracted_data["department_area"]:
                    response += f"üìä –ù–æ–º–µ—Ä/–ø–ª–æ—â–∞–¥—å –æ—Ç–¥–µ–ª–∞: {extracted_data['department_number']}/{extracted_data['department_area']}\n"
                
            if "pu_number" in extracted_data and "pu_area" in extracted_data:
                if extracted_data["pu_number"] and extracted_data["pu_area"]:
                    response += f"üî¢ –ü–£ –Ω–æ–º–µ—Ä/–ø–ª–æ—â–∞–¥—å: {extracted_data['pu_number']}/{extracted_data['pu_area']}\n"
                    
            if "corrections" in extracted_data and extracted_data["corrections"]:
                response += f"\n‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {extracted_data['corrections']}\n"
                
        else:
            response += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ Excel-—Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        response += "\nüìä Excel-—Ç–∞–±–ª–∏—Ü–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–Ω–∞–ª–∏–∑–∞ YandexGPT!"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
        keyboard = [
            [InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å —Ç–µ–∫—É—â–∏–π Excel-—Ñ–∞–π–ª", callback_data="export_excel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.reply_text(response, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞"""
    if not await check_admin(update, context):
        return
    
    try:
        # –û—á–∏—â–∞–µ–º –∫—ç—à –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é
        result = file_handler.clear_cache_and_history()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã
        excel_dir = os.path.join("data", "excel")
        excel_files_count = 0
        if os.path.exists(excel_dir):
            for file_name in os.listdir(excel_dir):
                if file_name.endswith(".xlsx"):
                    os.remove(os.path.join(excel_dir, file_name))
                    excel_files_count += 1
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        messages_dir = file_handler.messages_path
        messages_files_count = 0
        if os.path.exists(messages_dir):
            for file_name in os.listdir(messages_dir):
                if file_name.endswith(".docx"):
                    os.remove(os.path.join(messages_dir, file_name))
                    messages_files_count += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–±—Ä–æ—Å–µ
        await update.message.reply_text(
            f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!\n\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ:\n"
            f"- {excel_files_count} Excel —Ñ–∞–π–ª–æ–≤\n"
            f"- {messages_files_count} —Ñ–∞–π–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"- –ö—ç—à –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"–¢–µ–ø–µ—Ä—å –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –Ω–∞—á–∞—Ç —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞."
        )
        logging.info(f"–ë–æ—Ç —Å–±—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.username}. –£–¥–∞–ª–µ–Ω–æ {excel_files_count} Excel —Ñ–∞–π–ª–æ–≤ –∏ {messages_files_count} —Ñ–∞–π–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–æ—Ç–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–æ—Ç–∞: {str(e)}")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —á–∞—Ç
        if not is_allowed_chat(update.effective_chat.id):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ {update.effective_chat.id}")
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
        sender_name = update.effective_user.full_name
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("data/photos", exist_ok=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        file_name = f"{sender_name}_{datetime.now().strftime('%d%m%Y_%H%M%S')}.jpg"
        file_path = f"data/photos/{file_name}"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = await context.bot.get_file(photo.file_id)
        await photo_file.download_to_drive(file_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_message = await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–º–æ—â—å—é YandexGPT...")
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é YandexGPT
            result = await gpt.generate_response(
                prompt="""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–∞–±–ª–∏—Ü—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –∏–∑–≤–ª–µ–∫–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏ –¥–∞—Ç—É (–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã)
2. –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
3. –ü–ª–æ—â–∞–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –¥–µ–Ω—å –∏ –æ–±—â–∏–µ –ø–ª–æ—â–∞–¥–∏

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
    "subdivision": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
    "date": "–¥–∞—Ç–∞",
    "operations": [
        {
            "operation": "–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            "area_per_day": "–ø–ª–æ—â–∞–¥—å –∑–∞ –¥–µ–Ω—å",
            "total_area": "–æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å"
        }
    ]
}""",
                model="vision",
                image_path=file_path
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            response_text = gpt.get_response_text(result)
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            try:
                analysis_data = json.loads(response_text)
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
                analysis_data = {
                    "work_type": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å",
                    "operation": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å",
                    "notes": response_text
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Excel —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–æ—Ç–æ
            excel_path = file_handler.update_excel()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            response = "‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç—á–µ—Ç!\n\n"
            
            if "work_type" in analysis_data and analysis_data["work_type"]:
                response += f"üöú –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {analysis_data['work_type']}\n"
            if "operation" in analysis_data and analysis_data["operation"]:
                response += f"üìù –û–ø–µ—Ä–∞—Ü–∏—è: {analysis_data['operation']}\n"
            if "culture_to" in analysis_data and analysis_data["culture_to"]:
                response += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {analysis_data['culture_to']}\n"
            if "pu_number" in analysis_data and analysis_data["pu_number"]:
                response += f"üî¢ –ü–£: {analysis_data['pu_number']}/{analysis_data.get('pu_area', '')}\n"
            if "department" in analysis_data and analysis_data["department"]:
                response += f"üè¢ –û—Ç–¥–µ–ª: {analysis_data['department']} {analysis_data.get('department_number', '')}/{analysis_data.get('department_area', '')}\n"
            if "quality" in analysis_data and analysis_data["quality"]:
                response += f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã: {analysis_data['quality']}\n"
            if "field_condition" in analysis_data and analysis_data["field_condition"]:
                response += f"üå± –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è: {analysis_data['field_condition']}\n"
            if "issues" in analysis_data and analysis_data["issues"]:
                response += f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {analysis_data['issues']}\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await process_message.edit_text(response)
            
            logging.info(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {file_path}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            await process_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    await update.message.reply_text(
        f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}\n"
        f"–í–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}"
    )

async def process_message(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        chat_id = message.chat.id
        if chat_id not in ALLOWED_CHAT_IDS:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = f"{message.from_user.full_name} ({message.from_user.id})"
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_info}")

        photo_path = None
        message_text = message.text

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if message.photo:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
            photo = message.photo[-1]
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            photos_dir = os.path.join("data", "photos")
            os.makedirs(photos_dir, exist_ok=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –¥–∞—Ç—ã –∏ ID —Ñ–æ—Ç–æ
            photo_filename = f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{photo.file_id}.jpg"
            photo_path = os.path.join(photos_dir, photo_filename)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            await photo.download(destination_file=photo_path)
            logging.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {photo_path}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
            caption = message.caption or ""
            file_handler.save_photo_info(
                date=datetime.now(),
                sender=user_info,
                file_path=photo_path,
                caption=caption
            )
            
            message_text = caption

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        save_message_to_file(message_text, user_info)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        analysis_result = await file_handler.analyze_message(message_text, photo_path)
        
        if "error" in analysis_result:
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {analysis_result['error']}"
            logging.error(error_message)
            await message.reply(error_message)
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ\n\n"
        response += "üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n"
        
        if analysis_result.get("work_type"):
            response += f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {analysis_result['work_type']}\n"
        if analysis_result.get("operation"):
            response += f"–û–ø–µ—Ä–∞—Ü–∏—è: {analysis_result['operation']}\n"
        if analysis_result.get("culture_from"):
            response += f"–ò—Å—Ö–æ–¥–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞: {analysis_result['culture_from']}\n"
        if analysis_result.get("culture_to"):
            response += f"–¶–µ–ª–µ–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞: {analysis_result['culture_to']}\n"
        if analysis_result.get("pu_number"):
            response += f"–ù–æ–º–µ—Ä –ø–æ–ª—è: {analysis_result['pu_number']}\n"
        if analysis_result.get("pu_area"):
            response += f"–ü–ª–æ—â–∞–¥—å: {analysis_result['pu_area']} –≥–∞\n"
        if analysis_result.get("department"):
            response += f"–û—Ç–¥–µ–ª–µ–Ω–∏–µ: {analysis_result['department']}\n"
        if analysis_result.get("quality"):
            response += f"–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã: {analysis_result['quality']}\n"
        if analysis_result.get("field_condition"):
            response += f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è: {analysis_result['field_condition']}\n"
        if analysis_result.get("issues"):
            response += f"–ü—Ä–æ–±–ª–µ–º—ã: {analysis_result['issues']}\n"
            
        await message.reply(response)
        
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        logging.error(error_message)
        await message.reply(error_message)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("export", export_data))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("schedule", schedule_reports))
    application.add_handler(CommandHandler("reset", reset_command))
    application.add_handler(CommandHandler("chatid", get_chat_id))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 